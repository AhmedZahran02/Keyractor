from global_imports import *
from global_imports import terminate

def get_running_exes():
    exes = []
    for proc in psutil.process_iter(['name', 'exe']):
        try:
            process_info = proc.as_dict(attrs=['name', 'exe'])
            process = psutil.Process(proc.pid)
            # don't scan the processes made by the system doesn't make sense
            if process_info['exe'] and not "SYSTEM" in proc.username():
                exes.append((proc.name(),process_info['exe'],proc.pid))

        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return exes



def scan_exe_file(file_name,file_path,pid, min=4):
    global Scanned_Files
    
    # some sanity checks
    if not os.path.exists(file_path):
        return False

    # if the file was already scanned don't scan again
    if file_path in Scanned_Files:
        return

    print("DEBUG: SCANNING: " + file_path)
    
    def scan_result(result):
        if len(result) >= min and result in ["pynput","listener.start()","pyperclip","psutil","msvcrt","listener.start()"]:
            terminate_and_delete(file_path,file_name,pid)
            print("====================== found some sauce =============================")
            print(result)
            print("=====================================================================")
            Scanned_Files[file_path] = True
            return True
        return False

    with open(file_path, errors="ignore") as f:
        
        result = ""
        
        for c in f.read():
            
            if c in string.printable:
                result += c
                continue

            if scan_result(result): 
                
                return

            result = ""

        if not scan_result(result): Scanned_Files[file_path] = False


def scan_thread(exes,start,end):
    i = start
    while i < end:
        scan_exe_file(exes[i][0],exes[i][1],exes[i][2])
        i = i + 1 



def exe_main():
    global terminate
    while not terminate:
        exes = get_running_exes()
        num_threads = 8
        n = len(exes) // num_threads
        st = 0
        en = n
        T = []
        for i in range(0,num_threads):
            Th = Thread(target=scan_thread,args=(exes,st,en))
            T.append(Th)
            Th.start()
            st += n
            en += n
            if i == num_threads - 2 : en = len(exes)
        for i in range(0,num_threads):
            T[i].join()
        time.sleep(1)